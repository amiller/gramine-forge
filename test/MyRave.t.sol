// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.8;
import "solidity-stringutils/strings.sol";
import { BytesUtils } from "ens-contracts/dnssec-oracle/BytesUtils.sol";

import "forge-std/console2.sol";
import "forge-std/Test.sol";

import { AttestationDemo } from "src/MyRave.sol";

contract AttestVerify is Test, AttestationDemo {
    using strings for *;
    using BytesUtils for *;
    
    // See ffi-fetchquote.py for how to actually obtain these
    /* These were generated from https://github.com/amiller/gramine-dummy-attester
       So mrenclave is expected to be
         acbc315e9c372e43dceee812f466fc36594f6402d168cf2b12862a37c3c62927
    */
    bytes constant combined = hex"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000076000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000004200000000000000000000000000000000000000000000000000000000000000520000000000000000000000000000000000000000000000000000000000000002631323837303934323337343431373838333634343137333433313635333132313737383836370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a323032332d31312d30395432333a30373a34352e3430393933320000000000000000000000000000000000000000000000000000000000000000000000000001340000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ac2b435579496937344c507153364d304e4637597253784c71506458334d4b733644364c49507152472f5a454234576d785a567678414a776477672f306d3963596e55555167754c6e4a6f747468583634356c416f67664a674f385867352f39316c5365677779554b76486d4b67746a4f48582f59546256652f776d6757694264614c2b4b6d617259304a6534353950782f4671474c574c73414637656750414a526431586e38385a6e72733d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002168747470733a2f2f73656375726974792d63656e7465722e696e74656c2e636f6d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000565b22494e54454c2d53412d3030313631222c22494e54454c2d53412d3030323139222c22494e54454c2d53412d3030323839222c22494e54454c2d53412d3030333334222c22494e54454c2d53412d3030363135225d000000000000000000000000000000000000000000000000000000000000000000000000000000000025434f4e46494755524154494f4e5f414e445f53575f48415244454e494e475f4e454544454400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000db002000100b00c00000f000f000000000051caf5a48b450d624aefe3286d3148940000000000000000000000000000000014140207018001000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000000000700000000000000acbc315e9c372e43dceee812f466fc36594f6402d168cf2b12862a37c3c6292700000000000000000000000000000000000000000000000000000000000000001cf2e52911410fbf3f199056a98d58795a559a2e800933f7fcd13d048462271c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009113b0be77ed5d0d68680ec77206b8d587ed40679b71321ccdd5405e4d54a68200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001008d3dfdba3018bd84426be8b46a6c0fc4feb22b87c09a08e85be9624dc9b2440004b8d507a8403122b1c93af2cd118b52b46b813b76bb315a2f7a11e28b3309a096fb91185f6997de438c7f497ec82d426890de6bea8141d83d77394a91643791492b349d18d32d51768ecc51b25a8f0e65d8bde4925b3bcf9828c1aae4f87c8869f2dfd936bd1725c179be963408be66ca9cdca8dd1e724c044325f96f543ae78b4e398d94958b64f7b7504eebade0372e616a071f479b78e4b7238e9e463455e10f79808d135ee2b24b7cec4c96323cd1b31e15538d035e99792ce251edcf0b52299cdb050ebaca4290ed89f7e1fed66736dc78ad7ec2b1a55f240ac6bd4741";
    bytes constant report = hex"0000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000004200000000000000000000000000000000000000000000000000000000000000520000000000000000000000000000000000000000000000000000000000000002731363432343136333635303132383333363938363039373538323536393839333233353930333700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a323032332d31312d30385432313a30323a32382e3038353532300000000000000000000000000000000000000000000000000000000000000000000000000001340000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ac2b435579496937344c507153364d304e4637597253784c71506458334d4b733644364c49507152472f5a454234576d785a567678414a776477672f306d3963596e55555167754c6e4a6f747468583634356c416f67616a4a75646e434767666f634338486855544a2b6f61335144326d717a586865515536736359582f5a4c624b2b754452546b7436594e4934456c385a524930477a663447522f376b544b34392b4d4e383378383243453d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002168747470733a2f2f73656375726974792d63656e7465722e696e74656c2e636f6d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000675b22494e54454c2d53412d3030313631222c22494e54454c2d53412d3030323139222c22494e54454c2d53412d3030323839222c22494e54454c2d53412d3030333334222c22494e54454c2d53412d3030363135222c22494e54454c2d53412d3030383238225d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001147524f55505f4f55545f4f465f4441544500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000db0020001004f0c00000f000f000000000051caf5a48b450d624aefe3286d3148940000000000000000000000000000000013140207018001000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000000000700000000000000acbc315e9c372e43dceee812f466fc36594f6402d168cf2b12862a37c3c6292700000000000000000000000000000000000000000000000000000000000000001cf2e52911410fbf3f199056a98d58795a559a2e800933f7fcd13d048462271c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009113b0be77ed5d0d68680ec77206b8d587ed40679b71321ccdd5405e4d54a682000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    bytes constant sig = hex"08a18df00f464c10a28ce7ad2cb3f0766d6e78f3a3e7fed9adeb670010b97788be026bbe8c43b7b2a953104581a23a7890a9de650af67057087765f6cd0caba3a08b995b6a130319aa3186994eb1b4cc67cbc3227682ee18206303618b011069bd318c46f16ec2f8e7b7d2b0dfe8c2b3889ad83a0c1ef27236b03f71379f8313814586d63b92ed1664072e4a2c72ef6c74773dc201d007e4417e9def16e1e9ed052f848c39a2254cc13af0cfd78ff0963c418aa6643be954c8fb01d903852860a482bfed3f0ab281fa465873b15ba739a5ee77e58ce84c9f248a64292db3d50700f7440a1e2fed5f392f120dd5d4cf7f28728d4944688cd70835a2de595195dc";

    function testDecode() public view {
	decodeAttestation(combined);
    }

    function testRemoteAttestationDirect() public view {
        (Values2 memory reportValues, bytes memory reportBytes) = _buildReportBytes2(report);
        bytes memory quoteBody = reportValues.isvEnclaveQuoteBody;
        bytes32 mre = quoteBody.readBytes32(MRENCLAVE_OFFSET);
        bytes32 mrs = quoteBody.readBytes32(MRSIGNER_OFFSET);

	console2.logString(string(reportBytes));
	console2.logString(string(reportValues.id));
	console2.logString(string(reportValues.timestamp));
	console2.logString(string(reportValues.version));
	console2.logString(string(reportValues.epidPseudonym));
	console2.logString(string(reportValues.advisoryURL));
        console2.logString(string(reportValues.advisoryIDs));
	console2.logString(string(reportValues.isvEnclaveQuoteStatus));
	console2.logString(string(reportValues.platformInfoBlob));

	assert(mre == bytes32(0xacbc315e9c372e43dceee812f466fc36594f6402d168cf2b12862a37c3c62927));
	assert(mrs == bytes32(0x1cf2e52911410fbf3f199056a98d58795a559a2e800933f7fcd13d048462271c));
	console2.logBytes32(mre);
	console2.logBytes32(mrs);

        // Verify the report was signed by the Signing PK
        if (!this.verifyReportSignature(reportBytes, sig, signingMod, signingExp)) {
            revert BadReportSignature();
        }

	this.verifyRemoteAttestation(reportBytes, sig, signingMod, signingExp, mre, mrs);
    }
}
