// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.8;
import "solidity-stringutils/strings.sol";
import { BytesUtils } from "ens-contracts/dnssec-oracle/BytesUtils.sol";

import "forge-std/console2.sol";
import "forge-std/Test.sol";

import { DcapDemo } from "src/MyDcap.sol";
import {EnclaveIdStruct,TCBInfoStruct} from "automata-dcap-v3-attestation/AutomataDcapV3Attestation.sol";

contract DcapVerify is Test, DcapDemo {
    
    using stdJson for string;

    using strings for *;
    using BytesUtils for *;

    bytes constant quote = hex"";


    struct EnclaveId {
        bytes attributes;
        bytes attributesMask;
        uint16 isvprodid;
        bytes miscselect;
        bytes miscselectMask;
        bytes mrsigner;
	TcbLevel[] tcbLevels;
    }

    struct TcbLevel {
        EnclaveIdStruct.TcbObj tcb;
        string tcbStatus;
    }

    struct A {
	uint a;
	bytes b;
    }

/*    enum EnclaveIdStatus {
        OK,
        SGX_ENCLAVE_REPORT_ISVSVN_REVOKED
    }*/
    
    function testDecode() public {
	EnclaveIdStruct.EnclaveId memory s;
	vm.prank(tx.origin);
	this.configureQeIdentityJson(s);
    }
    function testJson() public {
	string memory root = vm.projectRoot();
	string memory path = string.concat(root, "/test/fixtures/test.json");
	string memory json = vm.readFile(path);
	bytes memory rawA = json.parseRaw(".");
	A memory myA = abi.decode(rawA, (A));
    }
    function testVerify() public {
	// Load the Quoting Enclave identity (part of the tcb, signed by intel?)
	{
	    string memory root = vm.projectRoot();
	    string memory path = string.concat(root, "/test/fixtures/identity.json");
	    EnclaveIdStruct.EnclaveId memory s = parseIdentity(path);
	    vm.broadcast(tx.origin);
	    this.configureQeIdentityJson(s);
	}
	// Load one of the TCB Infos. These are signed by Intel. They can be loaded separately.
	{
    	    string memory root = vm.projectRoot();
	    string memory path = string.concat(root, "/test/fixtures/tcbInfo.json");
	    TCBInfoStruct.TCBInfo memory s = parseTcbInfo(path);
	    vm.broadcast(tx.origin);
	    this.configureTcbInfoJson(s.fmspc, s);
	}
	// Test the attestation
	bool res = this.verifyAttestation(quote);
	console.log(res);
	assert(res);
    }

    function parseIdentity(string memory path) internal returns (EnclaveIdStruct.EnclaveId memory r) {
	string memory json = vm.readFile(path);
	bytes memory enclaveId = json.parseRaw(".enclaveIdentity");
	EnclaveId memory t = abi.decode(enclaveId, (EnclaveId));
	r.miscselect = bytes4(t.miscselect);
        r.miscselectMask = bytes4(t.miscselectMask);
        r.isvprodid = t.isvprodid;
        r.attributes = bytes16(t.attributes);
        r.attributesMask = bytes16(t.attributesMask);
        r.mrsigner = bytes32(t.mrsigner);
	r.tcbLevels = new EnclaveIdStruct.TcbLevel[](t.tcbLevels.length);
	for (uint i = 0; i < t.tcbLevels.length; i++) {
	    r.tcbLevels[i].tcb = t.tcbLevels[i].tcb;
            if (t.tcbLevels[i].tcbStatus.toSlice().equals("UpToDate".toSlice())) {
		r.tcbLevels[i].tcbStatus = EnclaveIdStruct.EnclaveIdStatus.OK;
	    } else {
		r.tcbLevels[i].tcbStatus = EnclaveIdStruct.EnclaveIdStatus.SGX_ENCLAVE_REPORT_ISVSVN_REVOKED;
	    }
	}
    }

    struct TCBInfo {
        string fmspc;
        string pceid;
        TCBLevelObj[] tcbLevels;
    }

    struct TCBLevelObj {
        uint256 pcesvn;
        uint256[] sgxTcbCompSvnArr;
        string status;
    }

    function parseTcbInfo(string memory path) public returns(TCBInfoStruct.TCBInfo memory) {
	string memory json = vm.readFile(path);
	bytes memory tcbInfo = json.parseRaw(".tcbInfo");
	TCBInfo memory t = abi.decode(tcbInfo, (TCBInfo));
	TCBInfoStruct.TCBInfo memory r;
	r.fmspc = t.fmspc;
	r.pceid = t.pceid;
	r.tcbLevels = new TCBInfoStruct.TCBLevelObj[](t.tcbLevels.length);
	for (uint i = 0; i < t.tcbLevels.length; i++) {
	    r.tcbLevels[i].pcesvn = t.tcbLevels[i].pcesvn;
            if (t.tcbLevels[i].status.toSlice().equals("UpToDate".toSlice())) {
		r.tcbLevels[i].status = TCBInfoStruct.TCBStatus.OK;
	    } else if (t.tcbLevels[i].status.toSlice().equals("SWHardeningNeeded".toSlice())) {
		r.tcbLevels[i].status = TCBInfoStruct.TCBStatus.TCB_SW_HARDENING_NEEDED;
	    } else if (t.tcbLevels[i].status.toSlice().equals("OutOfDate".toSlice())) {
		r.tcbLevels[i].status = TCBInfoStruct.TCBStatus.TCB_OUT_OF_DATE;
	    } else {
		r.tcbLevels[i].status = TCBInfoStruct.TCBStatus.TCB_UNRECOGNIZED;
	    }
	    r.tcbLevels[i].sgxTcbCompSvnArr = t.tcbLevels[i].sgxTcbCompSvnArr;
	}
	return r;
    }

/*    enum TCBStatus {
        OK,
        TCB_SW_HARDENING_NEEDED,
        TCB_CONFIGURATION_AND_SW_HARDENING_NEEDED,
        TCB_CONFIGURATION_NEEDED,
        TCB_OUT_OF_DATE,
        TCB_OUT_OF_DATE_CONFIGURATION_NEEDED,
        TCB_REVOKED,
        TCB_UNRECOGNIZED
    }
    }*/
    
}

